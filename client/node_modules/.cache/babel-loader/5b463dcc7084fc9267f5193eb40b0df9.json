{"ast":null,"code":"var _jsxFileName = \"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_User_Posts_page.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass _User_Posts_page extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateDisplayedPosts = () => {\n      let displayedPosts = [];\n      this.state.posts.forEach(post => {\n        let thisPost = {\n          id: \"\",\n          user: \"\",\n          title: \"\",\n          content: \"\",\n          creationDate: \"\"\n        };\n        let curtailedContent;\n\n        if (post.content.length > 100) {\n          curtailedContent = post.content.substring(0, 100) + \"...\";\n        } else {\n          curtailedContent = post.content;\n        }\n\n        thisPost.id = post.id;\n        thisPost.title = post.title;\n        thisPost.content = curtailedContent;\n        thisPost.creationDate = post.creationDate;\n        displayedPosts.push(thisPost);\n      });\n      this.setState({\n        displayedPosts: displayedPosts\n      });\n    };\n\n    this.expandPost = e => {\n      let expandedText = this.state.posts.find(post => {\n        return parseInt(post.id) === parseInt(e.target.id);\n      }).content;\n      let tempDisplayedPosts = this.state.displayedPosts;\n      let expandedTextIndex = tempDisplayedPosts.findIndex(post => parseInt(post.id) === parseInt(e.target.id));\n\n      if (expandedText === e.target.value) {\n        tempDisplayedPosts[expandedTextIndex].content = expandedText.substring(0, 100) + \"...\";\n      } else {\n        tempDisplayedPosts[expandedTextIndex].content = expandedText;\n      }\n\n      this.setState({\n        displayedPosts: tempDisplayedPosts\n      }); // e.target.blur();\n    };\n\n    this.renderPosts = () => {\n      // console.log(this.state.posts)\n      let output = \"\";\n\n      if (this.state.displayedPosts) {\n        output = this.state.displayedPosts.map(post => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"col-md-6\",\n                  style: {\n                    textAlign: \"left\",\n                    fontSize: \"28px\"\n                  },\n                  children: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"row\",\n                    children: [\"- \", post.user]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"row\",\n                    style: {\n                      textAlign: \"right\"\n                    },\n                    children: [\"Date: \", post.creationDate]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row pb-4\",\n                children: /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n                  id: post.id,\n                  readOnly: false,\n                  value: post.content,\n                  onFocus: e => {\n                    this.expandPost(e);\n                  },\n                  style: {\n                    cursor: \"pointer\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 29\n              }, this)]\n            }, post.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row mb-3\"\n            }, `${post.id}_space`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }, this)]\n          }, `${post.id}_container`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this);\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      posts: null,\n      displayedPosts: null\n    };\n  }\n\n  componentDidMount() {\n    const port = \"http://localhost:3001\";\n    Axios.get(`${port}/isUserAuth`, {\n      headers: {\n        \"x-access-token\": localStorage.getItem(\"token\")\n      }\n    }).then(res => {\n      if (res.data) {\n        //pull user's posts if authenticated\n        console.log(`${localStorage.getItem(\"username\")} authorized`);\n        Axios.post(`${port}/api/getuserposts`, {\n          id: localStorage.getItem(\"id\")\n        }).then(res => {\n          this.setState({\n            posts: res.data\n          });\n          this.updateDisplayedPosts(); // console.log(this.state.posts)\n        });\n      } else {\n        console.log(\"user not authorized\");\n      }\n    });\n  } //update property where posts are pulled from when rendering page\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content_page>\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Glorious Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), (() => {\n        switch (this.state.posts) {\n          case null:\n            return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this);\n\n          default:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(this.renderPosts, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this);\n        }\n      })()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _User_Posts_page; //USER STORIES\n// After logging in, the blogger should be redirected to all of their blog posts.\n//As a blogger I want to be able to see all of the posts I have created so that I can track my progress.\n//The blog posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n//As a blogger I want to be able to see any individual post I have made.\n//The full post should be displayed.\n//As a blogger I want to be able to edit a post so that I can fix any mistakes I made creating it.\n//When the user toggles edit mode, the page remains the same and the fields become editable.\n//As a blogger I want to be able to delete a post so that I can remove any unwanted content.\n//When the user deletes the blog they should be redirected to all of their blog posts.","map":{"version":3,"sources":["/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_User_Posts_page.js"],"names":["React","Component","useState","useEffect","Axios","TextareaAutosize","_User_Posts_page","constructor","props","updateDisplayedPosts","displayedPosts","state","posts","forEach","post","thisPost","id","user","title","content","creationDate","curtailedContent","length","substring","push","setState","expandPost","e","expandedText","find","parseInt","target","tempDisplayedPosts","expandedTextIndex","findIndex","value","renderPosts","output","map","textAlign","fontSize","cursor","componentDidMount","port","get","headers","localStorage","getItem","then","res","data","console","log","render"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport TextareaAutosize from 'react-textarea-autosize';\n\n\nclass _User_Posts_page extends Component{\n    constructor(props) {\n        super(props);\n        this.state = { \n            posts: null,\n            displayedPosts: null\n        }\n    }\n\n    componentDidMount() {\n        const port = \"http://localhost:3001\"\n\n        Axios.get(`${port}/isUserAuth`, {headers: {\n            \"x-access-token\": localStorage.getItem(\"token\"),\n            }}).then((res) => {\n                if (res.data) { //pull user's posts if authenticated\n                    console.log(`${localStorage.getItem(\"username\")} authorized`)\n                    Axios.post(`${port}/api/getuserposts`,{\n                        id: localStorage.getItem(\"id\")\n                    }).then((res) => {\n                        this.setState({ posts: res.data})\n                        this.updateDisplayedPosts();\n                        // console.log(this.state.posts)\n                    })\n                } else {    \n                    console.log(\"user not authorized\")\n                }\n        })\n    }\n\n    //update property where posts are pulled from when rendering page\n    updateDisplayedPosts = () => {\n        let displayedPosts = [];\n\n        this.state.posts.forEach(post => {\n            let thisPost = {\n                id: \"\",\n                user: \"\",\n                title: \"\",\n                content: \"\",\n                creationDate: \"\"                \n            }\n\n            let curtailedContent;\n            if(post.content.length > 100) {\n                curtailedContent = post.content.substring(0,100) + \"...\";\n            } else {\n                curtailedContent = post.content\n            }\n\n            thisPost.id = post.id;\n            thisPost.title = post.title;\n            thisPost.content = curtailedContent;\n            thisPost.creationDate = post.creationDate;\n            displayedPosts.push(thisPost);\n        });\n        this.setState({displayedPosts: displayedPosts})\n    }\n\n    expandPost = (e) => {\n        let expandedText = this.state.posts.find((post) => {\n            return(\n                parseInt(post.id) === parseInt(e.target.id)\n            )\n        }).content;\n        let tempDisplayedPosts = this.state.displayedPosts;\n        let expandedTextIndex = tempDisplayedPosts.findIndex((post) => parseInt(post.id) === parseInt(e.target.id))\n\n        if (expandedText === e.target.value) {\n            tempDisplayedPosts[expandedTextIndex].content = expandedText.substring(0,100) + \"...\";\n        } else {\n            tempDisplayedPosts[expandedTextIndex].content = expandedText;\n        }\n        this.setState({displayedPosts: tempDisplayedPosts})\n        // e.target.blur();\n    }\n\n    renderPosts = () => {\n        // console.log(this.state.posts)\n        let output = \"\"\n        if (this.state.displayedPosts) {\n            output = this.state.displayedPosts.map(post => {\n                return(\n                    <div key={`${post.id}_container`}>\n                        <div className=\"container\" key={post.id}>\n                            <div className='row'>\n                                <label className=\"col-md-6\" style={{textAlign: \"left\", fontSize: \"28px\"}}>{post.title}</label>\n                                <div className=\"col-md-3\"></div>\n                                <div className=\"col-md\">\n                                    <label className=\"row\">- {post.user}</label>\n                                    <label className=\"row\" style={{textAlign: \"right\"}}>Date: {post.creationDate}</label>\n                                </div>\n                            </div>\n                            <div className='row pb-4'>\n                                <TextareaAutosize id={post.id} readOnly={false} value={post.content} onFocus={(e) => {this.expandPost(e)}} style={{cursor: \"pointer\"}}></TextareaAutosize>\n                            </div>\n                        </div>\n                        <div className=\"row mb-3\" key={`${post.id}_space`}></div>\n                    </div>\n    \n                )\n            });\n        }\n\n        return(\n            <div>\n                {output}\n            </div>\n        );\n    }   \n\n\n    render() {\n\n        return(\n            <div className=\"content_page>\">\n                <h2>My Glorious Content</h2>\n\n                {(() => {\n                    switch (this.state.posts) {\n                        case null:\n                            return(\n                                <div>\n                                </div>\n                            )\n                        default:\n                            return (\n                                <div>\n                                    <this.renderPosts />\n                                </div>\n                            )\n                    }\n                })()}\n            </div>\n        )\n    }\n}\n\nexport default _User_Posts_page;\n\n\n//USER STORIES\n// After logging in, the blogger should be redirected to all of their blog posts.\n//As a blogger I want to be able to see all of the posts I have created so that I can track my progress.\n//The blog posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n\n//As a blogger I want to be able to see any individual post I have made.\n//The full post should be displayed.\n//As a blogger I want to be able to edit a post so that I can fix any mistakes I made creating it.\n//When the user toggles edit mode, the page remains the same and the fields become editable.\n\n//As a blogger I want to be able to delete a post so that I can remove any unwanted content.\n//When the user deletes the blog they should be redirected to all of their blog posts.\n\n\n\n"]},"metadata":{},"sourceType":"module"}