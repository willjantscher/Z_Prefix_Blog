{"ast":null,"code":"import _classCallCheck from\"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from\"react\";import Axios from'axios';import'./App.css';import TextareaAutosize from'react-textarea-autosize';// const port = \"http://localhost:8080\"\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var port=\"https://jantscher-z-prefix-blog.herokuapp.com\";var _User_Posts_page=/*#__PURE__*/function(_Component){_inherits(_User_Posts_page,_Component);var _super=_createSuper(_User_Posts_page);function _User_Posts_page(props){var _this;_classCallCheck(this,_User_Posts_page);_this=_super.call(this,props);_this.updatePropsFromDb=function(){Axios.get(\"\".concat(port,\"/isUserAuth\"),{headers:{\"x-access-token\":localStorage.getItem(\"token\")}}).then(function(res){if(res.data){//pull user's posts if authenticated\nconsole.log(\"\".concat(localStorage.getItem(\"username\"),\" authorized\"));Axios.post(\"\".concat(port,\"/api/getuserposts\"),{id:localStorage.getItem(\"id\")}).then(function(res){_this.setState({posts:res.data.reverse()});_this.updateDisplayedPosts();// console.log(this.state.posts)\n});}else{console.log(\"user not authorized\");}});};_this.updateDisplayedPosts=function(){var displayedPosts=[];console.log(\"updating displayed posts\");_this.state.posts.forEach(function(post){var thisPost={id:\"\",user:\"\",title:\"\",content:\"\",creationDate:\"\"};var curtailedContent;if(post.content.length>100){curtailedContent=post.content.substring(0,100)+\"...\";}else{curtailedContent=post.content;}thisPost.id=post.id;thisPost.title=post.title;thisPost.content=curtailedContent;thisPost.creationDate=post.creationDate;displayedPosts.push(thisPost);});_this.setState({displayedPosts:displayedPosts});};_this.expandPost=function(e){var fullText=_this.state.posts.find(function(post){return parseInt(post.id)===parseInt(e.target.id);}).content;var tempDisplayedPosts=_this.state.displayedPosts;var fullTextIndex=tempDisplayedPosts.findIndex(function(post){return parseInt(post.id)===parseInt(e.target.id);});if(fullText===e.target.value){// tempDisplayedPosts[fullTextIndex].content = fullText.substring(0,100) + \"...\";\n}else{tempDisplayedPosts[fullTextIndex].content=fullText;e.target.value=fullText;//content updating from posts (not displayed) which updates from db directly\n}_this.setState({displayedPosts:tempDisplayedPosts});e.target.style={cursor:\"caret\"};};_this.deletePost=function(e){// console.log(e.target.id);\nAxios.get(\"\".concat(port,\"/isUserAuth\"),{headers:{\"x-access-token\":localStorage.getItem(\"token\")}}).then(function(res){if(res.data){//pull user's posts if authenticated\nconsole.log(\"\".concat(localStorage.getItem(\"username\"),\" authorized\"));// console.log(e.target.id)\nAxios.delete(\"\".concat(port,\"/api/deletepost\"),{data:{id:e.target.id}}).then(function(res){// console.log(res)\n_this.updatePropsFromDb();});}});};_this.updatePost=function(e){console.log(\"updating post in db\");var textIndex=_this.state.displayedPosts.findIndex(function(post){return parseInt(post.id)===parseInt(e.target.id);});var content=_this.state.displayedPosts[textIndex].content;// console.log(content)\nvar body={id:e.target.id,content:content};// check if user authenticated before posting\nAxios.get(\"\".concat(port,\"/isUserAuth\"),{headers:{\"x-access-token\":localStorage.getItem(\"token\")}}).then(function(res){// console.log(res.data);\nif(res.data){//post to db if user authenticated\nAxios.patch(\"\".concat(port,\"/api/updatepost\"),body).then(function(res){// console.log(res)\n_this.updatePropsFromDb();});}else{console.log(\"user not authorized\");}});};_this.postChanged=function(e){// console.log(\"values changed\")\n// console.log(e.target.value)\nvar tempDisplayedPosts=_this.state.displayedPosts;var textIndex=tempDisplayedPosts.findIndex(function(post){return parseInt(post.id)===parseInt(e.target.id);});tempDisplayedPosts[textIndex].content=e.target.value;_this.setState({displayedPosts:tempDisplayedPosts});// console.log(\"state values\" + this.state.displayedPosts[0].content)\n};_this.renderPosts=function(){// console.log(this.state.posts)\nvar output=\"\";if(_this.state.displayedPosts){output=_this.state.displayedPosts.map(function(post){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"col-md-6\",style:{textAlign:\"left\",fontSize:\"28px\"},children:post.title}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-3\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"col-md\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"\".concat(post.id),className:\"row\",style:{cursor:\"pointer\"},onClick:function onClick(e){_this.deletePost(e);},children:\"Delete Post\"}),/*#__PURE__*/_jsxs(\"label\",{className:\"row\",style:{textAlign:\"right\"},children:[\"Date: \",post.creationDate.substring(0,10)]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"row pb-1\",children:/*#__PURE__*/_jsx(TextareaAutosize,{id:post.id,readOnly:false,defaultValue:post.content,onChange:function onChange(e){_this.postChanged(e);},onFocus:function onFocus(e){_this.expandPost(e);},style:{cursor:\"pointer\"}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"row pb-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-9\"}),/*#__PURE__*/_jsx(\"button\",{id:post.id,className:\"col-md-2\",style:{cursor:\"pointer\"},onClick:function onClick(e){_this.updatePost(e);},children:\"Save Edits\"})]})]},post.id),/*#__PURE__*/_jsx(\"div\",{className:\"row mb-3\"},\"\".concat(post.id,\"_space\"))]},\"\".concat(post.id,\"_container\"));});}return/*#__PURE__*/_jsx(\"div\",{children:output});};_this.state={posts:null,displayedPosts:null,height:null};return _this;}_createClass(_User_Posts_page,[{key:\"componentDidMount\",value:function componentDidMount(){this.updatePropsFromDb();}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/_jsxs(\"div\",{className:\"content_page>\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"My Glorious Content\"}),function(){switch(_this2.state.posts){case null:return/*#__PURE__*/_jsx(\"div\",{});default:return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(_this2.renderPosts,{})});}}()]});}}]);return _User_Posts_page;}(Component);export default _User_Posts_page;//USER STORIES\n// After logging in, the blogger should be redirected to all of their blog posts.\n//As a blogger I want to be able to see all of the posts I have created so that I can track my progress.\n//The blog posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n//As a blogger I want to be able to see any individual post I have made.\n//The full post should be displayed.\n//As a blogger I want to be able to edit a post so that I can fix any mistakes I made creating it.\n//When the user toggles edit mode, the page remains the same and the fields become editable.\n//As a blogger I want to be able to delete a post so that I can remove any unwanted content.\n//When the user deletes the blog they should be redirected to all of their blog posts.","map":{"version":3,"sources":["/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_User_Posts_page.js"],"names":["React","Component","Axios","TextareaAutosize","port","_User_Posts_page","props","updatePropsFromDb","get","headers","localStorage","getItem","then","res","data","console","log","post","id","setState","posts","reverse","updateDisplayedPosts","displayedPosts","state","forEach","thisPost","user","title","content","creationDate","curtailedContent","length","substring","push","expandPost","e","fullText","find","parseInt","target","tempDisplayedPosts","fullTextIndex","findIndex","value","style","cursor","deletePost","delete","updatePost","textIndex","body","patch","postChanged","renderPosts","output","map","textAlign","fontSize","height"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport TextareaAutosize from 'react-textarea-autosize';\n// const port = \"http://localhost:8080\"\nconst port = \"https://jantscher-z-prefix-blog.herokuapp.com\"\n\nclass _User_Posts_page extends Component{\n    constructor(props) {\n        super(props);\n        this.state = { \n            posts: null,\n            displayedPosts: null,\n            height: null\n        }\n    }\n\n    componentDidMount() {\n        this.updatePropsFromDb();\n    }\n\n    updatePropsFromDb = () => {\n        Axios.get(`${port}/isUserAuth`, {headers: {\n            \"x-access-token\": localStorage.getItem(\"token\"),\n            }}).then((res) => {\n                if (res.data) { //pull user's posts if authenticated\n                    console.log(`${localStorage.getItem(\"username\")} authorized`)\n                    Axios.post(`${port}/api/getuserposts`,{\n                        id: localStorage.getItem(\"id\")\n                    }).then((res) => {\n                        this.setState({ posts: res.data.reverse()})\n                        this.updateDisplayedPosts();\n                        // console.log(this.state.posts)\n                    })\n                } else {    \n                    console.log(\"user not authorized\")\n                }\n        })\n    }\n\n    //update property where posts are pulled from when rendering page\n    updateDisplayedPosts = () => {\n        let displayedPosts = [];\n        console.log(\"updating displayed posts\")\n\n        this.state.posts.forEach(post => {\n            let thisPost = {\n                id: \"\",\n                user: \"\",\n                title: \"\",\n                content: \"\",\n                creationDate: \"\"                \n            }\n\n            let curtailedContent;\n            if(post.content.length > 100) {\n                curtailedContent = post.content.substring(0,100) + \"...\";\n            } else {\n                curtailedContent = post.content\n            }\n\n            thisPost.id = post.id;\n            thisPost.title = post.title;\n            thisPost.content = curtailedContent;\n            thisPost.creationDate = post.creationDate;\n            displayedPosts.push(thisPost);\n        });\n        this.setState({displayedPosts: displayedPosts})\n    }\n\n    expandPost = (e) => {\n        let fullText = this.state.posts.find((post) => {\n            return(\n                parseInt(post.id) === parseInt(e.target.id)\n            )\n        }).content;\n        let tempDisplayedPosts = this.state.displayedPosts;\n        let fullTextIndex = tempDisplayedPosts.findIndex((post) => parseInt(post.id) === parseInt(e.target.id))\n\n        if (fullText === e.target.value) {\n            // tempDisplayedPosts[fullTextIndex].content = fullText.substring(0,100) + \"...\";\n        } else {\n            tempDisplayedPosts[fullTextIndex].content = fullText;\n            e.target.value=fullText //content updating from posts (not displayed) which updates from db directly\n        }\n        this.setState({displayedPosts: tempDisplayedPosts})\n        e.target.style={cursor: \"caret\"}\n    }\n\n    deletePost = (e) => {\n        // console.log(e.target.id);\n        Axios.get(`${port}/isUserAuth`, {headers: {\n            \"x-access-token\": localStorage.getItem(\"token\"),\n            }}).then((res) => {\n                if (res.data) { //pull user's posts if authenticated\n                    console.log(`${localStorage.getItem(\"username\")} authorized`)\n                    // console.log(e.target.id)\n                    Axios.delete(`${port}/api/deletepost`, { data:{ id: e.target.id }})\n                    .then((res) => {\n                        // console.log(res)\n                        this.updatePropsFromDb();\n                    })\n            }\n        })\n    }\n\n    updatePost = (e) => {\n        console.log(\"updating post in db\")\n        let textIndex = this.state.displayedPosts.findIndex((post) => parseInt(post.id) === parseInt(e.target.id))\n        let content = this.state.displayedPosts[textIndex].content;\n\n        // console.log(content)\n\n        let body = {\n            id: e.target.id,\n            content: content\n        }\n\n        // check if user authenticated before posting\n        Axios.get(`${port}/isUserAuth`, {headers: {\n            \"x-access-token\": localStorage.getItem(\"token\"),\n            }}).then((res) => {\n            // console.log(res.data);\n            if (res.data) { //post to db if user authenticated\n                Axios.patch(`${port}/api/updatepost`, body).then((res) => {\n                    // console.log(res)\n                    this.updatePropsFromDb()\n                })\n            } else {    \n                console.log(\"user not authorized\")\n            }\n        })\n    }\n\n    postChanged = (e) => {\n        // console.log(\"values changed\")\n        // console.log(e.target.value)\n        let tempDisplayedPosts = this.state.displayedPosts;\n        let textIndex = tempDisplayedPosts.findIndex((post) => parseInt(post.id) === parseInt(e.target.id))\n        tempDisplayedPosts[textIndex].content = e.target.value;\n        this.setState({displayedPosts: tempDisplayedPosts})\n        // console.log(\"state values\" + this.state.displayedPosts[0].content)\n    }\n\n\n    renderPosts = () => {\n        // console.log(this.state.posts)\n        let output = \"\"\n        if (this.state.displayedPosts) {\n            output = this.state.displayedPosts.map(post => {\n                return(\n                    <div key={`${post.id}_container`}>\n                        <div className=\"container\" key={post.id}>\n                            <div className='row'>\n                                <label className=\"col-md-6\" style={{textAlign: \"left\", fontSize: \"28px\"}}>{post.title}</label>\n                                <div className=\"col-md-3\"></div>\n                                <div className=\"col-md\">\n                                    <button id={`${post.id}`} className=\"row\" style={{cursor: \"pointer\"}} onClick={(e) => {this.deletePost(e)}}>Delete Post</button>\n                                    <label className=\"row\" style={{textAlign: \"right\"}}>Date: {post.creationDate.substring(0, 10)}</label>\n                                </div>\n                            </div>\n                            <div className='row pb-1'>\n                                <TextareaAutosize id={post.id} readOnly={false} defaultValue={post.content} onChange={(e) => {this.postChanged(e)}} onFocus={(e) => {this.expandPost(e)}} style={{cursor: \"pointer\"}}></TextareaAutosize>\n                            </div>\n                            <div className=\"row pb-1\">\n                                <div className=\"col-md-9\"></div>\n                                <button id={post.id} className=\"col-md-2\" style={{cursor: \"pointer\"}} onClick={(e) => {this.updatePost(e)}}>Save Edits</button>\n                            </div>\n                        </div>\n                        <div className=\"row mb-3\" key={`${post.id}_space`}></div>\n                    </div>\n    \n                )\n            });\n        }\n\n        return(\n            <div>\n                {output}\n            </div>\n        );\n    }   \n\n\n    render() {\n\n        return(\n            <div className=\"content_page>\">\n                <h2>My Glorious Content</h2>\n\n                {(() => {\n                    switch (this.state.posts) {\n                        case null:\n                            return(\n                                <div>\n                                </div>\n                            )\n                        default:\n                            return (\n                                <div>\n                                    <this.renderPosts />\n                                </div>\n                            )\n                    }\n                })()}\n            </div>\n        )\n    }\n}\n\nexport default _User_Posts_page;\n\n\n//USER STORIES\n// After logging in, the blogger should be redirected to all of their blog posts.\n//As a blogger I want to be able to see all of the posts I have created so that I can track my progress.\n//The blog posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n\n//As a blogger I want to be able to see any individual post I have made.\n//The full post should be displayed.\n//As a blogger I want to be able to edit a post so that I can fix any mistakes I made creating it.\n//When the user toggles edit mode, the page remains the same and the fields become editable.\n\n//As a blogger I want to be able to delete a post so that I can remove any unwanted content.\n//When the user deletes the blog they should be redirected to all of their blog posts.\n\n\n\n"]},"metadata":{},"sourceType":"module"}