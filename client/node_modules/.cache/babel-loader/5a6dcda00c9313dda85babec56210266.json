{"ast":null,"code":"var _jsxFileName = \"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_Content_page.js\";\nimport React, { Component } from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass _Content_page extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateDisplayedPosts = () => {\n      let displayedPosts = [];\n      this.state.posts.forEach(post => {\n        let thisPost = {\n          id: \"\",\n          user: \"\",\n          title: \"\",\n          content: \"\",\n          creationDate: \"\"\n        };\n        let username = this.state.usernames.find(user => {\n          return user.id === post.userId;\n        }).username;\n        let curtailedContent;\n\n        if (post.content.length > 100) {\n          curtailedContent = post.content.substring(0, 100) + \"...\";\n        } else {\n          curtailedContent = post.content;\n        }\n\n        thisPost.id = post.id;\n        thisPost.user = username;\n        thisPost.title = post.title;\n        thisPost.content = curtailedContent;\n        thisPost.creationDate = post.creationDate;\n        displayedPosts.push(thisPost);\n      });\n      this.setState({\n        displayedPosts: displayedPosts\n      });\n    };\n\n    this.expandPost = e => {\n      console.log(this.state.posts);\n      console.log(e.target.id);\n      let expandedText = this.state.posts.find(post => {\n        console.log(post.id + e.target.id);\n        return String(post.id) === String(e.target.id);\n      });\n      console.log(expandedText);\n    };\n\n    this.renderPosts = () => {\n      // console.log(this.state.posts)\n      let output = \"\";\n\n      if (this.state.displayedPosts) {\n        output = this.state.displayedPosts.map(post => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"col-md\",\n                  style: {\n                    textAlign: \"left\",\n                    fontSize: \"28px\"\n                  },\n                  children: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"row\",\n                    children: [\"- \", post.user]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"row\",\n                    style: {\n                      textAlign: \"right\"\n                    },\n                    children: [\"Date: \", post.creationDate]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row pb-4\",\n                children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  id: post.id,\n                  readOnly: true,\n                  defaultValue: post.content,\n                  onFocus: e => {\n                    this.expandPost(e);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 29\n              }, this)]\n            }, post.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row mb-3\"\n            }, `${post.id}_space`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 25\n            }, this)]\n          }, `${post.id}_container`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this);\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      posts: null,\n      usernames: null,\n      displayedPosts: null\n    };\n  }\n\n  componentDidMount() {\n    const port = \"http://localhost:3001\"; //fetch all posts here\n\n    Axios.get(`${port}/api/getallposts`).then(res => {\n      this.setState({\n        posts: res.data\n      }); // console.log(this.state.posts)\n    }).then(Axios.get(`${port}/api/getallusers`).then(res => {\n      this.setState({\n        usernames: res.data\n      });\n      this.updateDisplayedPosts();\n    }));\n  } //update property where posts are pulled from when rendering page\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content_page>\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Content for Consumption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), (() => {\n        switch (this.state.posts) {\n          case null:\n            return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this);\n\n          default:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(this.renderPosts, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this);\n        }\n      })()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _Content_page; //USER STORIES\n//As a visitor I want to be able to view all posts created by all users so that I can consume content.\n//Unauthenticated users should be able to view all posts, and any single post.\n//The posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n//As a visitor I want to be able to view a specific post created by all users so that I can consume content.\n//Unauthenticated users should be able to view all posts, and any single post.\n//As a blogger I want to be able to view all posts created by all users so that I can see other people’s content.\n//Unauthenticated users should be able to view all posts, and any single post.","map":{"version":3,"sources":["/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_Content_page.js"],"names":["React","Component","Axios","_Content_page","constructor","props","updateDisplayedPosts","displayedPosts","state","posts","forEach","post","thisPost","id","user","title","content","creationDate","username","usernames","find","userId","curtailedContent","length","substring","push","setState","expandPost","e","console","log","target","expandedText","String","renderPosts","output","map","textAlign","fontSize","componentDidMount","port","get","then","res","data","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Axios from 'axios';\nimport './App.css';\n\nclass _Content_page extends Component{\n    constructor(props) {\n        super(props);\n        this.state = { \n            posts: null,\n            usernames: null,\n            displayedPosts: null\n        }\n    }\n\n    componentDidMount() {\n        const port = \"http://localhost:3001\"\n\n        //fetch all posts here\n        Axios.get(`${port}/api/getallposts`).then((res) => {\n            this.setState({ posts: res.data})\n            // console.log(this.state.posts)\n        }).then(\n            Axios.get(`${port}/api/getallusers`).then((res) => {          \n                this.setState({ usernames: res.data })\n                this.updateDisplayedPosts();\n            })\n        )\n    }\n\n    //update property where posts are pulled from when rendering page\n    updateDisplayedPosts = () => {\n        let displayedPosts = [];\n\n        this.state.posts.forEach(post => {\n            let thisPost = {\n                id: \"\",\n                user: \"\",\n                title: \"\",\n                content: \"\",\n                creationDate: \"\"                \n            }\n\n            let username = this.state.usernames.find((user) => {\n                return (user.id === post.userId)\n            }).username\n\n            let curtailedContent;\n            if(post.content.length > 100) {\n                curtailedContent = post.content.substring(0,100) + \"...\";\n            } else {\n                curtailedContent = post.content\n            }\n\n            thisPost.id = post.id;\n            thisPost.user = username;\n            thisPost.title = post.title;\n            thisPost.content = curtailedContent;\n            thisPost.creationDate = post.creationDate;\n\n            displayedPosts.push(thisPost);\n        });\n        this.setState({displayedPosts: displayedPosts})\n    }\n\n    expandPost = (e) => {\n        console.log(this.state.posts)\n        console.log(e.target.id)\n        let expandedText = this.state.posts.find((post) => {\n            console.log(post.id + e.target.id)\n            return(\n                String(post.id) === String(e.target.id)\n            )\n        });\n\n        console.log(expandedText)\n    }\n\n    renderPosts = () => {\n        // console.log(this.state.posts)\n        let output = \"\"\n        if (this.state.displayedPosts) {\n            output = this.state.displayedPosts.map(post => {\n                return(\n                    <div key={`${post.id}_container`}>\n                        <div className=\"container\" key={post.id}>\n                            <div className='row'>\n                                <label className=\"col-md\" style={{textAlign: \"left\", fontSize: \"28px\"}}>{post.title}</label>\n                                <div className=\"col-md-6\"></div>\n                                <div className=\"col-md\">\n                                    <label className=\"row\">- {post.user}</label>\n                                    <label className=\"row\" style={{textAlign: \"right\"}}>Date: {post.creationDate}</label>\n                                </div>\n                            </div>\n                            <div className='row pb-4'>\n                                <textarea id={post.id} readOnly={true} defaultValue={post.content} onFocus={(e) => {this.expandPost(e)}}></textarea>\n                            </div>\n                        </div>\n                        <div className=\"row mb-3\" key={`${post.id}_space`}></div>\n                    </div>\n    \n                )\n            });\n        }\n\n        return(\n            <div>\n                {output}\n            </div>\n        );\n    }   \n\n\n    render() {\n\n        return(\n            <div className=\"content_page>\">\n                <h2>Content for Consumption</h2>\n\n                {(() => {\n                    switch (this.state.posts) {\n                        case null:\n                            return(\n                                <div>\n                                </div>\n                            )\n                        default:\n                            return (\n                                <div>\n                                    <this.renderPosts />\n                                </div>\n                            )\n                    }\n                })()}\n            </div>\n        )\n    }\n}\n\nexport default _Content_page;\n\n\n\n\n//USER STORIES\n//As a visitor I want to be able to view all posts created by all users so that I can consume content.\n//Unauthenticated users should be able to view all posts, and any single post.\n//The posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n\n//As a visitor I want to be able to view a specific post created by all users so that I can consume content.\n//Unauthenticated users should be able to view all posts, and any single post.\n//As a blogger I want to be able to view all posts created by all users so that I can see other people’s content.\n//Unauthenticated users should be able to view all posts, and any single post.\n\n\n"]},"metadata":{},"sourceType":"module"}