{"ast":null,"code":"var _jsxFileName = \"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_Content_page.js\";\nimport React, { Component } from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass _Content_page extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateDisplayedPosts = () => {\n      let displayedPosts = [];\n      this.state.posts.forEach(post => {\n        let thisPost = {\n          id: \"\",\n          user: \"\",\n          title: \"\",\n          content: \"\",\n          creationDate: \"\"\n        };\n        let username = this.state.usernames.find(user => {\n          return user.id === post.userId;\n        }).username;\n        let curtailedContent;\n\n        if (post.content.length > 100) {\n          curtailedContent = post.content.substring(0, 100) + \"...\";\n        } else {\n          curtailedContent = post.content;\n        }\n\n        thisPost.id = post.id;\n        thisPost.user = username;\n        thisPost.title = post.title;\n        thisPost.content = curtailedContent;\n        thisPost.creationDate = post.creationDate;\n        displayedPosts.push(thisPost);\n      });\n      this.setState({\n        displayedPosts: displayedPosts\n      });\n    };\n\n    this.renderPosts = () => {\n      // console.log(this.state.posts)\n      let output = this.state.disp.map(post => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"col-md\",\n                style: {\n                  textAlign: \"left\",\n                  fontSize: \"24px\"\n                },\n                children: [\"Title: \", post.title]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-md-6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"col-md pt-2\",\n                style: {\n                  textAlign: \"right\"\n                },\n                children: [\"Date: \", post.creationDate]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row pb-4\",\n              children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                readOnly: true,\n                defaultValue: post.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 25\n            }, this)]\n          }, post.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-3\"\n          }, `${post.id}_space`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)]\n        }, `${post.id}_container`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this);\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      posts: null,\n      usernames: null,\n      displayedPosts: null\n    };\n  }\n\n  componentDidMount() {\n    const port = \"http://localhost:3001\"; //fetch all posts here\n\n    Axios.get(`${port}/api/getallposts`).then(res => {\n      this.setState({\n        posts: res.data\n      }); // console.log(this.state.posts)\n    }).then(Axios.get(`${port}/api/getallusers`).then(res => {\n      this.setState({\n        usernames: res.data\n      });\n      this.updateDisplayedPosts();\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content_page>\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Content for Consumption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), (() => {\n        switch (this.state.posts) {\n          case null:\n            return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 33\n            }, this);\n\n          default:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(this.renderPosts, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this);\n        }\n      })()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _Content_page; //USER STORIES\n//As a visitor I want to be able to view all posts created by all users so that I can consume content.\n//Unauthenticated users should be able to view all posts, and any single post.\n//The posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n//As a visitor I want to be able to view a specific post created by all users so that I can consume content.\n//Unauthenticated users should be able to view all posts, and any single post.\n//As a blogger I want to be able to view all posts created by all users so that I can see other people’s content.\n//Unauthenticated users should be able to view all posts, and any single post.","map":{"version":3,"sources":["/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_Content_page.js"],"names":["React","Component","Axios","_Content_page","constructor","props","updateDisplayedPosts","displayedPosts","state","posts","forEach","post","thisPost","id","user","title","content","creationDate","username","usernames","find","userId","curtailedContent","length","substring","push","setState","renderPosts","output","disp","map","textAlign","fontSize","componentDidMount","port","get","then","res","data","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAqC;AACjCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAwBnBC,oBAxBmB,GAwBI,MAAM;AACzB,UAAIC,cAAc,GAAG,EAArB;AAEA,WAAKC,KAAL,CAAWC,KAAX,CAAiBC,OAAjB,CAAyBC,IAAI,IAAI;AAC7B,YAAIC,QAAQ,GAAG;AACXC,UAAAA,EAAE,EAAE,EADO;AAEXC,UAAAA,IAAI,EAAE,EAFK;AAGXC,UAAAA,KAAK,EAAE,EAHI;AAIXC,UAAAA,OAAO,EAAE,EAJE;AAKXC,UAAAA,YAAY,EAAE;AALH,SAAf;AAQA,YAAIC,QAAQ,GAAG,KAAKV,KAAL,CAAWW,SAAX,CAAqBC,IAArB,CAA2BN,IAAD,IAAU;AAC/C,iBAAQA,IAAI,CAACD,EAAL,KAAYF,IAAI,CAACU,MAAzB;AACH,SAFc,EAEZH,QAFH;AAIA,YAAII,gBAAJ;;AACA,YAAGX,IAAI,CAACK,OAAL,CAAaO,MAAb,GAAsB,GAAzB,EAA8B;AAC1BD,UAAAA,gBAAgB,GAAGX,IAAI,CAACK,OAAL,CAAaQ,SAAb,CAAuB,CAAvB,EAAyB,GAAzB,IAAgC,KAAnD;AACH,SAFD,MAEO;AACHF,UAAAA,gBAAgB,GAAGX,IAAI,CAACK,OAAxB;AACH;;AAEDJ,QAAAA,QAAQ,CAACC,EAAT,GAAcF,IAAI,CAACE,EAAnB;AACAD,QAAAA,QAAQ,CAACE,IAAT,GAAgBI,QAAhB;AACAN,QAAAA,QAAQ,CAACG,KAAT,GAAiBJ,IAAI,CAACI,KAAtB;AACAH,QAAAA,QAAQ,CAACI,OAAT,GAAmBM,gBAAnB;AACAV,QAAAA,QAAQ,CAACK,YAAT,GAAwBN,IAAI,CAACM,YAA7B;AAEAV,QAAAA,cAAc,CAACkB,IAAf,CAAoBb,QAApB;AACH,OA3BD;AA4BA,WAAKc,QAAL,CAAc;AAACnB,QAAAA,cAAc,EAAEA;AAAjB,OAAd;AACH,KAxDkB;;AAAA,SA0DnBoB,WA1DmB,GA0DL,MAAM;AAChB;AACA,UAAIC,MAAM,GAAG,KAAKpB,KAAL,CAAWqB,IAAX,CAAgBC,GAAhB,CAAoBnB,IAAI,IAAI;AACrC,4BACI;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,KAAf;AAAA,sCACI;AAAO,gBAAA,SAAS,EAAC,QAAjB;AAA0B,gBAAA,KAAK,EAAE;AAACoB,kBAAAA,SAAS,EAAE,MAAZ;AAAoBC,kBAAAA,QAAQ,EAAE;AAA9B,iBAAjC;AAAA,sCAAgFrB,IAAI,CAACI,KAArF;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAK,gBAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAO,gBAAA,SAAS,EAAC,aAAjB;AAA+B,gBAAA,KAAK,EAAE;AAACgB,kBAAAA,SAAS,EAAE;AAAZ,iBAAtC;AAAA,qCAAmEpB,IAAI,CAACM,YAAxE;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI;AAAK,cAAA,SAAS,EAAC,UAAf;AAAA,qCACI;AAAU,gBAAA,QAAQ,EAAE,IAApB;AAA0B,gBAAA,YAAY,EAAEN,IAAI,CAACK;AAA7C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA,aAAgCL,IAAI,CAACE,EAArC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAWI;AAAK,YAAA,SAAS,EAAC;AAAf,aAAgC,GAAEF,IAAI,CAACE,EAAG,QAA1C;AAAA;AAAA;AAAA;AAAA,kBAXJ;AAAA,WAAW,GAAEF,IAAI,CAACE,EAAG,YAArB;AAAA;AAAA;AAAA;AAAA,gBADJ;AAgBH,OAjBY,CAAb;AAkBA,0BACI;AAAA,kBACKe;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAnFkB;;AAEf,SAAKpB,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETU,MAAAA,SAAS,EAAE,IAFF;AAGTZ,MAAAA,cAAc,EAAE;AAHP,KAAb;AAKH;;AAED0B,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,IAAI,GAAG,uBAAb,CADgB,CAGhB;;AACAhC,IAAAA,KAAK,CAACiC,GAAN,CAAW,GAAED,IAAK,kBAAlB,EAAqCE,IAArC,CAA2CC,GAAD,IAAS;AAC/C,WAAKX,QAAL,CAAc;AAAEjB,QAAAA,KAAK,EAAE4B,GAAG,CAACC;AAAb,OAAd,EAD+C,CAE/C;AACH,KAHD,EAGGF,IAHH,CAIIlC,KAAK,CAACiC,GAAN,CAAW,GAAED,IAAK,kBAAlB,EAAqCE,IAArC,CAA2CC,GAAD,IAAS;AAC/C,WAAKX,QAAL,CAAc;AAAEP,QAAAA,SAAS,EAAEkB,GAAG,CAACC;AAAjB,OAAd;AACA,WAAKhC,oBAAL;AACH,KAHD,CAJJ;AASH;;AAgEDiC,EAAAA,MAAM,GAAG;AAEL,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAGK,CAAC,MAAM;AACJ,gBAAQ,KAAK/B,KAAL,CAAWC,KAAnB;AACI,eAAK,IAAL;AACI,gCACI;AAAA;AAAA;AAAA;AAAA,oBADJ;;AAIJ;AACI,gCACI;AAAA,qCACI,aAAM,WAAN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ;AAPR;AAaH,OAdA,GAHL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAqBH;;AA9GgC;;AAiHrC,eAAeN,aAAf,C,CAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from \"react\";\nimport Axios from 'axios';\nimport './App.css';\n\nclass _Content_page extends Component{\n    constructor(props) {\n        super(props);\n        this.state = { \n            posts: null,\n            usernames: null,\n            displayedPosts: null\n        }\n    }\n\n    componentDidMount() {\n        const port = \"http://localhost:3001\"\n\n        //fetch all posts here\n        Axios.get(`${port}/api/getallposts`).then((res) => {\n            this.setState({ posts: res.data})\n            // console.log(this.state.posts)\n        }).then(\n            Axios.get(`${port}/api/getallusers`).then((res) => {          \n                this.setState({ usernames: res.data })\n                this.updateDisplayedPosts();\n            })\n        )\n    }\n\n    updateDisplayedPosts = () => {\n        let displayedPosts = [];\n\n        this.state.posts.forEach(post => {\n            let thisPost = {\n                id: \"\",\n                user: \"\",\n                title: \"\",\n                content: \"\",\n                creationDate: \"\"                \n            }\n\n            let username = this.state.usernames.find((user) => {\n                return (user.id === post.userId)\n            }).username\n\n            let curtailedContent;\n            if(post.content.length > 100) {\n                curtailedContent = post.content.substring(0,100) + \"...\";\n            } else {\n                curtailedContent = post.content\n            }\n\n            thisPost.id = post.id;\n            thisPost.user = username;\n            thisPost.title = post.title;\n            thisPost.content = curtailedContent;\n            thisPost.creationDate = post.creationDate;\n\n            displayedPosts.push(thisPost);\n        });\n        this.setState({displayedPosts: displayedPosts})\n    }\n\n    renderPosts = () => {\n        // console.log(this.state.posts)\n        let output = this.state.disp.map(post => {\n            return(\n                <div key={`${post.id}_container`}>\n                    <div className=\"container\" key={post.id}>\n                        <div className='row'>\n                            <label className=\"col-md\" style={{textAlign: \"left\", fontSize: \"24px\"}}>Title: {post.title}</label>\n                            <div className=\"col-md-6\"></div>\n                            <label className=\"col-md pt-2\" style={{textAlign: \"right\"}}>Date: {post.creationDate}</label>\n                        </div>\n                        <div className='row pb-4'>\n                            <textarea readOnly={true} defaultValue={post.content}></textarea>\n                        </div>\n                    </div>\n                    <div className=\"row mb-3\" key={`${post.id}_space`}></div>\n                </div>\n\n            )\n        });\n        return(\n            <div>\n                {output}\n            </div>\n        );\n    }   \n\n\n    render() {\n\n        return(\n            <div className=\"content_page>\">\n                <h2>Content for Consumption</h2>\n\n                {(() => {\n                    switch (this.state.posts) {\n                        case null:\n                            return(\n                                <div>\n                                </div>\n                            )\n                        default:\n                            return (\n                                <div>\n                                    <this.renderPosts />\n                                </div>\n                            )\n                    }\n                })()}\n            </div>\n        )\n    }\n}\n\nexport default _Content_page;\n\n\n\n\n//USER STORIES\n//As a visitor I want to be able to view all posts created by all users so that I can consume content.\n//Unauthenticated users should be able to view all posts, and any single post.\n//The posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n\n//As a visitor I want to be able to view a specific post created by all users so that I can consume content.\n//Unauthenticated users should be able to view all posts, and any single post.\n//As a blogger I want to be able to view all posts created by all users so that I can see other people’s content.\n//Unauthenticated users should be able to view all posts, and any single post.\n\n\n"]},"metadata":{},"sourceType":"module"}