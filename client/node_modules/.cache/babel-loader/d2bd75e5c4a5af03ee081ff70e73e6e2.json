{"ast":null,"code":"var _jsxFileName = \"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_User_Posts_page.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass _User_Posts_page extends Component {\n  constructor(props) {\n    super(props);\n\n    this.expandPost = e => {\n      let expandedText = this.state.posts.find(post => {\n        return parseInt(post.id) === parseInt(e.target.id);\n      }).content;\n      let tempDisplayedPosts = this.state.displayedPosts;\n      let expandedTextIndex = tempDisplayedPosts.findIndex(post => parseInt(post.id) === parseInt(e.target.id));\n\n      if (expandedText === e.target.value) {\n        tempDisplayedPosts[expandedTextIndex].content = expandedText.substring(0, 100) + \"...\";\n      } else {\n        tempDisplayedPosts[expandedTextIndex].content = expandedText;\n      }\n\n      this.setState({\n        displayedPosts: tempDisplayedPosts\n      });\n      e.target.blur();\n    };\n\n    this.renderPosts = () => {\n      // console.log(this.state.posts)\n      let output = \"\";\n\n      if (this.state.displayedPosts) {\n        output = this.state.displayedPosts.map(post => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"col-md-6\",\n                  style: {\n                    textAlign: \"left\",\n                    fontSize: \"28px\"\n                  },\n                  children: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"row\",\n                    children: [\"- \", post.user]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"row\",\n                    style: {\n                      textAlign: \"right\"\n                    },\n                    children: [\"Date: \", post.creationDate]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row pb-4\",\n                children: /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n                  id: post.id,\n                  readOnly: true,\n                  value: post.content,\n                  onFocus: e => {\n                    this.expandPost(e);\n                  },\n                  style: {\n                    cursor: \"pointer\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 29\n              }, this)]\n            }, post.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row mb-3\"\n            }, `${post.id}_space`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }, this)]\n          }, `${post.id}_container`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this);\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      posts: null\n    };\n  }\n\n  componentDidMount() {\n    const port = \"http://localhost:3001\";\n    Axios.get(`${port}/isUserAuth`, {\n      headers: {\n        \"x-access-token\": localStorage.getItem(\"token\")\n      }\n    }).then(res => {\n      console.log(\"authorized: \" + res.data);\n\n      if (res.data) {\n        //pull user's posts if authenticated\n        Axios.post(`${port}/api/getuserposts`, {\n          id: localStorage.getItem(\"id\")\n        }).then(res => {\n          // console.log(res.data)\n          this.setState({\n            posts: res.data\n          });\n        });\n      } else {\n        console.log(\"user not authorized\");\n      }\n    });\n  } //update property where posts are pulled from when rendering page\n  // updateDisplayedPosts = () => {\n  //     let displayedPosts = [];\n  //     this.state.posts.forEach(post => {\n  //         let thisPost = {\n  //             id: \"\",\n  //             user: \"\",\n  //             title: \"\",\n  //             content: \"\",\n  //             creationDate: \"\"                \n  //         }\n  //         let username = this.state.usernames.find((user) => {\n  //             return (user.id === post.userId)\n  //         }).username\n  //         let curtailedContent;\n  //         if(post.content.length > 100) {\n  //             curtailedContent = post.content.substring(0,100) + \"...\";\n  //         } else {\n  //             curtailedContent = post.content\n  //         }\n  //         thisPost.id = post.id;\n  //         thisPost.user = username;\n  //         thisPost.title = post.title;\n  //         thisPost.content = curtailedContent;\n  //         thisPost.creationDate = post.creationDate;\n  //         displayedPosts.push(thisPost);\n  //     });\n  //     this.setState({displayedPosts: displayedPosts})\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content_page>\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Glorious Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), (() => {\n        switch (this.state.posts) {\n          case null:\n            return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this);\n\n          default:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(this.renderPosts, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this);\n        }\n      })()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _User_Posts_page; //USER STORIES\n// After logging in, the blogger should be redirected to all of their blog posts.\n//As a blogger I want to be able to see all of the posts I have created so that I can track my progress.\n//The blog posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n//As a blogger I want to be able to see any individual post I have made.\n//The full post should be displayed.\n//As a blogger I want to be able to edit a post so that I can fix any mistakes I made creating it.\n//When the user toggles edit mode, the page remains the same and the fields become editable.\n//As a blogger I want to be able to delete a post so that I can remove any unwanted content.\n//When the user deletes the blog they should be redirected to all of their blog posts.","map":{"version":3,"sources":["/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_User_Posts_page.js"],"names":["React","Component","useState","useEffect","Axios","TextareaAutosize","_User_Posts_page","constructor","props","expandPost","e","expandedText","state","posts","find","post","parseInt","id","target","content","tempDisplayedPosts","displayedPosts","expandedTextIndex","findIndex","value","substring","setState","blur","renderPosts","output","map","textAlign","fontSize","title","user","creationDate","cursor","componentDidMount","port","get","headers","localStorage","getItem","then","res","console","log","data","render"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport TextareaAutosize from 'react-textarea-autosize';\n\n\nclass _User_Posts_page extends Component{\n    constructor(props) {\n        super(props);\n        this.state = { \n            posts: null\n        }\n    }\n\n    componentDidMount() {\n        const port = \"http://localhost:3001\"\n\n        Axios.get(`${port}/isUserAuth`, {headers: {\n            \"x-access-token\": localStorage.getItem(\"token\"),\n            }}).then((res) => {\n                console.log(\"authorized: \" + res.data)\n                if (res.data) { //pull user's posts if authenticated\n                    Axios.post(`${port}/api/getuserposts`,{\n                        id: localStorage.getItem(\"id\")\n                    }).then((res) => {\n                        // console.log(res.data)\n                        this.setState({ posts: res.data})\n                    })\n                } else {    \n                    console.log(\"user not authorized\")\n                }\n        })\n    }\n\n    //update property where posts are pulled from when rendering page\n    // updateDisplayedPosts = () => {\n    //     let displayedPosts = [];\n\n    //     this.state.posts.forEach(post => {\n    //         let thisPost = {\n    //             id: \"\",\n    //             user: \"\",\n    //             title: \"\",\n    //             content: \"\",\n    //             creationDate: \"\"                \n    //         }\n\n    //         let username = this.state.usernames.find((user) => {\n    //             return (user.id === post.userId)\n    //         }).username\n\n    //         let curtailedContent;\n    //         if(post.content.length > 100) {\n    //             curtailedContent = post.content.substring(0,100) + \"...\";\n    //         } else {\n    //             curtailedContent = post.content\n    //         }\n\n    //         thisPost.id = post.id;\n    //         thisPost.user = username;\n    //         thisPost.title = post.title;\n    //         thisPost.content = curtailedContent;\n    //         thisPost.creationDate = post.creationDate;\n\n    //         displayedPosts.push(thisPost);\n    //     });\n    //     this.setState({displayedPosts: displayedPosts})\n    // }\n\n    expandPost = (e) => {\n        let expandedText = this.state.posts.find((post) => {\n            return(\n                parseInt(post.id) === parseInt(e.target.id)\n            )\n        }).content;\n        let tempDisplayedPosts = this.state.displayedPosts;\n        let expandedTextIndex = tempDisplayedPosts.findIndex((post) => parseInt(post.id) === parseInt(e.target.id))\n\n        if (expandedText === e.target.value) {\n            tempDisplayedPosts[expandedTextIndex].content = expandedText.substring(0,100) + \"...\";\n        } else {\n            tempDisplayedPosts[expandedTextIndex].content = expandedText;\n        }\n        this.setState({displayedPosts: tempDisplayedPosts})\n        e.target.blur();\n    }\n\n    renderPosts = () => {\n        // console.log(this.state.posts)\n        let output = \"\"\n        if (this.state.displayedPosts) {\n            output = this.state.displayedPosts.map(post => {\n                return(\n                    <div key={`${post.id}_container`}>\n                        <div className=\"container\" key={post.id}>\n                            <div className='row'>\n                                <label className=\"col-md-6\" style={{textAlign: \"left\", fontSize: \"28px\"}}>{post.title}</label>\n                                <div className=\"col-md-3\"></div>\n                                <div className=\"col-md\">\n                                    <label className=\"row\">- {post.user}</label>\n                                    <label className=\"row\" style={{textAlign: \"right\"}}>Date: {post.creationDate}</label>\n                                </div>\n                            </div>\n                            <div className='row pb-4'>\n                                <TextareaAutosize id={post.id} readOnly={true} value={post.content} onFocus={(e) => {this.expandPost(e)}} style={{cursor: \"pointer\"}}></TextareaAutosize>\n                            </div>\n                        </div>\n                        <div className=\"row mb-3\" key={`${post.id}_space`}></div>\n                    </div>\n    \n                )\n            });\n        }\n\n        return(\n            <div>\n                {output}\n            </div>\n        );\n    }   \n\n\n    render() {\n\n        return(\n            <div className=\"content_page>\">\n                <h2>My Glorious Content</h2>\n\n                {(() => {\n                    switch (this.state.posts) {\n                        case null:\n                            return(\n                                <div>\n                                </div>\n                            )\n                        default:\n                            return (\n                                <div>\n                                    <this.renderPosts />\n                                </div>\n                            )\n                    }\n                })()}\n            </div>\n        )\n    }\n}\n\nexport default _User_Posts_page;\n\n\n//USER STORIES\n// After logging in, the blogger should be redirected to all of their blog posts.\n//As a blogger I want to be able to see all of the posts I have created so that I can track my progress.\n//The blog posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n\n//As a blogger I want to be able to see any individual post I have made.\n//The full post should be displayed.\n//As a blogger I want to be able to edit a post so that I can fix any mistakes I made creating it.\n//When the user toggles edit mode, the page remains the same and the fields become editable.\n\n//As a blogger I want to be able to delete a post so that I can remove any unwanted content.\n//When the user deletes the blog they should be redirected to all of their blog posts.\n\n\n\n"]},"metadata":{},"sourceType":"module"}