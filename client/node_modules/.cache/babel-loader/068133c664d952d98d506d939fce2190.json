{"ast":null,"code":"var _jsxFileName = \"/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_User_Posts_page.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst port = \"http://localhost:3001\";\n\nclass _User_Posts_page extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updatePropsFromDb = () => {\n      Axios.get(`${port}/isUserAuth`, {\n        headers: {\n          \"x-access-token\": localStorage.getItem(\"token\")\n        }\n      }).then(res => {\n        if (res.data) {\n          //pull user's posts if authenticated\n          console.log(`${localStorage.getItem(\"username\")} authorized`);\n          Axios.post(`${port}/api/getuserposts`, {\n            id: localStorage.getItem(\"id\")\n          }).then(res => {\n            this.setState({\n              posts: res.data\n            });\n            this.updateDisplayedPosts(); // console.log(this.state.posts)\n          });\n        } else {\n          console.log(\"user not authorized\");\n        }\n      });\n    };\n\n    this.updateDisplayedPosts = () => {\n      let displayedPosts = [];\n      console.log(\"updating displayed posts\");\n      this.state.posts.forEach(post => {\n        let thisPost = {\n          id: \"\",\n          user: \"\",\n          title: \"\",\n          content: \"\",\n          creationDate: \"\"\n        };\n        let curtailedContent;\n\n        if (post.content.length > 100) {\n          curtailedContent = post.content.substring(0, 100) + \"...\";\n        } else {\n          curtailedContent = post.content;\n        }\n\n        thisPost.id = post.id;\n        thisPost.title = post.title;\n        thisPost.content = curtailedContent;\n        thisPost.creationDate = post.creationDate;\n        displayedPosts.push(thisPost);\n      });\n      this.setState({\n        displayedPosts: displayedPosts\n      });\n    };\n\n    this.expandPost = e => {\n      let fullText = this.state.posts.find(post => {\n        return parseInt(post.id) === parseInt(e.target.id);\n      }).content;\n      let tempDisplayedPosts = this.state.displayedPosts;\n      console.log(\"expand\" + this.state.displayedPosts[0].content);\n      let fullTextIndex = tempDisplayedPosts.findIndex(post => parseInt(post.id) === parseInt(e.target.id));\n\n      if (fullText === e.target.value) {// tempDisplayedPosts[fullTextIndex].content = fullText.substring(0,100) + \"...\";\n      } else {\n        tempDisplayedPosts[fullTextIndex].content = fullText;\n        e.target.value = fullText; //content updating from posts (not displayed) which updates from db directly\n      }\n\n      this.setState({\n        displayedPosts: tempDisplayedPosts\n      });\n      e.target.style = {\n        cursor: \"caret\"\n      };\n    };\n\n    this.deletePost = e => {\n      // console.log(e.target.id);\n      Axios.get(`${port}/isUserAuth`, {\n        headers: {\n          \"x-access-token\": localStorage.getItem(\"token\")\n        }\n      }).then(res => {\n        if (res.data) {\n          //pull user's posts if authenticated\n          console.log(`${localStorage.getItem(\"username\")} authorized`);\n          console.log(e.target.id);\n          Axios.delete(`${port}/api/deletepost`, {\n            data: {\n              id: e.target.id\n            }\n          }).then(res => {\n            // console.log(res)\n            this.updatePropsFromDb();\n          });\n        }\n      });\n    };\n\n    this.updatePost = e => {\n      console.log(\"updating post in db\");\n      let date = new Date();\n      let formatted_date = date.toISOString().split('T')[0];\n      let textIndex = this.state.displayedPosts.findIndex(post => parseInt(post.id) === parseInt(e.target.id));\n      let content = this.state.displayedPosts[textIndex].content;\n      console.log(content);\n      let body = {\n        id: e.target.id,\n        content: content\n      }; // check if user authenticated before posting\n\n      Axios.get(`${port}/isUserAuth`, {\n        headers: {\n          \"x-access-token\": localStorage.getItem(\"token\")\n        }\n      }).then(res => {\n        // console.log(res.data);\n        if (res.data) {\n          //post to db if user authenticated\n          Axios.patch(`${port}/api/updatepost`, body).then(res => {\n            console.log(res);\n            this.updatePropsFromDb();\n          });\n        } else {\n          console.log(\"user not authorized\");\n        }\n      });\n    };\n\n    this.postChanged = e => {\n      // console.log(\"values changed\")\n      // console.log(e.target.value)\n      let tempDisplayedPosts = this.state.displayedPosts;\n      let textIndex = tempDisplayedPosts.findIndex(post => parseInt(post.id) === parseInt(e.target.id));\n      tempDisplayedPosts[textIndex].content = e.target.value;\n      this.setState({\n        displayedPosts: tempDisplayedPosts\n      }); // console.log(\"state values\" + this.state.displayedPosts[0].content)\n    };\n\n    this.renderPosts = () => {\n      // console.log(this.state.posts)\n      let output = \"\";\n\n      if (this.state.displayedPosts) {\n        output = this.state.displayedPosts.map(post => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"col-md-6\",\n                  style: {\n                    textAlign: \"left\",\n                    fontSize: \"28px\"\n                  },\n                  children: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    id: `${post.id}`,\n                    className: \"row\",\n                    style: {\n                      cursor: \"pointer\"\n                    },\n                    onClick: e => {\n                      this.deletePost(e);\n                    },\n                    children: \"Delete Post\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"row\",\n                    style: {\n                      textAlign: \"right\"\n                    },\n                    children: [\"Date: \", post.creationDate.substring(0, 10)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row pb-1\",\n                children: /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n                  id: post.id,\n                  readOnly: false,\n                  defaultValue: post.content,\n                  onChange: e => {\n                    this.postChanged(e);\n                  },\n                  onFocus: e => {\n                    this.expandPost(e);\n                  },\n                  style: {\n                    cursor: \"pointer\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row pb-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-9\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  id: post.id,\n                  className: \"col-md-2\",\n                  style: {\n                    cursor: \"pointer\"\n                  },\n                  onClick: e => {\n                    this.updatePost(e);\n                  },\n                  children: \"Save Edits\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 29\n              }, this)]\n            }, post.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row mb-3\"\n            }, `${post.id}_space`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 25\n            }, this)]\n          }, `${post.id}_container`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }, this);\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      posts: null,\n      displayedPosts: null,\n      height: null\n    };\n  }\n\n  componentDidMount() {\n    this.updatePropsFromDb();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content_page>\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Glorious Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), (() => {\n        switch (this.state.posts) {\n          case null:\n            return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 33\n            }, this);\n\n          default:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(this.renderPosts, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 33\n            }, this);\n        }\n      })()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _User_Posts_page; //USER STORIES\n// After logging in, the blogger should be redirected to all of their blog posts.\n//As a blogger I want to be able to see all of the posts I have created so that I can track my progress.\n//The blog posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n//As a blogger I want to be able to see any individual post I have made.\n//The full post should be displayed.\n//As a blogger I want to be able to edit a post so that I can fix any mistakes I made creating it.\n//When the user toggles edit mode, the page remains the same and the fields become editable.\n//As a blogger I want to be able to delete a post so that I can remove any unwanted content.\n//When the user deletes the blog they should be redirected to all of their blog posts.","map":{"version":3,"sources":["/Users/williamjantscher/Z_Prefix_App/z_prefix_blog/client/src/_User_Posts_page.js"],"names":["React","Component","useState","useEffect","Axios","TextareaAutosize","port","_User_Posts_page","constructor","props","updatePropsFromDb","get","headers","localStorage","getItem","then","res","data","console","log","post","id","setState","posts","updateDisplayedPosts","displayedPosts","state","forEach","thisPost","user","title","content","creationDate","curtailedContent","length","substring","push","expandPost","e","fullText","find","parseInt","target","tempDisplayedPosts","fullTextIndex","findIndex","value","style","cursor","deletePost","delete","updatePost","date","Date","formatted_date","toISOString","split","textIndex","body","patch","postChanged","renderPosts","output","map","textAlign","fontSize","height","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from \"react\";\nimport Axios from 'axios';\nimport './App.css';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nconst port = \"http://localhost:3001\"\n\nclass _User_Posts_page extends Component{\n    constructor(props) {\n        super(props);\n        this.state = { \n            posts: null,\n            displayedPosts: null,\n            height: null\n        }\n    }\n\n    componentDidMount() {\n        this.updatePropsFromDb();\n    }\n\n    updatePropsFromDb = () => {\n        Axios.get(`${port}/isUserAuth`, {headers: {\n            \"x-access-token\": localStorage.getItem(\"token\"),\n            }}).then((res) => {\n                if (res.data) { //pull user's posts if authenticated\n                    console.log(`${localStorage.getItem(\"username\")} authorized`)\n                    Axios.post(`${port}/api/getuserposts`,{\n                        id: localStorage.getItem(\"id\")\n                    }).then((res) => {\n                        this.setState({ posts: res.data})\n                        this.updateDisplayedPosts();\n                        // console.log(this.state.posts)\n                    })\n                } else {    \n                    console.log(\"user not authorized\")\n                }\n        })\n    }\n\n    //update property where posts are pulled from when rendering page\n    updateDisplayedPosts = () => {\n        let displayedPosts = [];\n        console.log(\"updating displayed posts\")\n\n        this.state.posts.forEach(post => {\n            let thisPost = {\n                id: \"\",\n                user: \"\",\n                title: \"\",\n                content: \"\",\n                creationDate: \"\"                \n            }\n\n            let curtailedContent;\n            if(post.content.length > 100) {\n                curtailedContent = post.content.substring(0,100) + \"...\";\n            } else {\n                curtailedContent = post.content\n            }\n\n            thisPost.id = post.id;\n            thisPost.title = post.title;\n            thisPost.content = curtailedContent;\n            thisPost.creationDate = post.creationDate;\n            displayedPosts.push(thisPost);\n        });\n        this.setState({displayedPosts: displayedPosts})\n    }\n\n    expandPost = (e) => {\n        let fullText = this.state.posts.find((post) => {\n            return(\n                parseInt(post.id) === parseInt(e.target.id)\n            )\n        }).content;\n        let tempDisplayedPosts = this.state.displayedPosts;\n        console.log(\"expand\" + this.state.displayedPosts[0].content)\n        let fullTextIndex = tempDisplayedPosts.findIndex((post) => parseInt(post.id) === parseInt(e.target.id))\n\n        if (fullText === e.target.value) {\n            // tempDisplayedPosts[fullTextIndex].content = fullText.substring(0,100) + \"...\";\n        } else {\n            tempDisplayedPosts[fullTextIndex].content = fullText;\n            e.target.value=fullText //content updating from posts (not displayed) which updates from db directly\n        }\n        this.setState({displayedPosts: tempDisplayedPosts})\n        e.target.style={cursor: \"caret\"}\n    }\n\n    deletePost = (e) => {\n        // console.log(e.target.id);\n        Axios.get(`${port}/isUserAuth`, {headers: {\n            \"x-access-token\": localStorage.getItem(\"token\"),\n            }}).then((res) => {\n                if (res.data) { //pull user's posts if authenticated\n                    console.log(`${localStorage.getItem(\"username\")} authorized`)\n                    console.log(e.target.id)\n                    Axios.delete(`${port}/api/deletepost`, { data:{ id: e.target.id }})\n                    .then((res) => {\n                        // console.log(res)\n                        this.updatePropsFromDb();\n                    })\n            }\n        })\n    }\n\n    updatePost = (e) => {\n        console.log(\"updating post in db\")\n        let date = new Date();\n        let formatted_date = date.toISOString().split('T')[0];\n        let textIndex = this.state.displayedPosts.findIndex((post) => parseInt(post.id) === parseInt(e.target.id))\n        let content = this.state.displayedPosts[textIndex].content;\n\n        console.log(content)\n\n        let body = {\n            id: e.target.id,\n            content: content\n        }\n\n        // check if user authenticated before posting\n        Axios.get(`${port}/isUserAuth`, {headers: {\n            \"x-access-token\": localStorage.getItem(\"token\"),\n            }}).then((res) => {\n            // console.log(res.data);\n            if (res.data) { //post to db if user authenticated\n                Axios.patch(`${port}/api/updatepost`, body).then((res) => {\n                    console.log(res)\n                    this.updatePropsFromDb()\n                })\n            } else {    \n                console.log(\"user not authorized\")\n            }\n        })\n    }\n\n    postChanged = (e) => {\n        // console.log(\"values changed\")\n        // console.log(e.target.value)\n        let tempDisplayedPosts = this.state.displayedPosts;\n        let textIndex = tempDisplayedPosts.findIndex((post) => parseInt(post.id) === parseInt(e.target.id))\n        tempDisplayedPosts[textIndex].content = e.target.value;\n        this.setState({displayedPosts: tempDisplayedPosts})\n        // console.log(\"state values\" + this.state.displayedPosts[0].content)\n    }\n\n\n    renderPosts = () => {\n        // console.log(this.state.posts)\n        let output = \"\"\n        if (this.state.displayedPosts) {\n            output = this.state.displayedPosts.map(post => {\n                return(\n                    <div key={`${post.id}_container`}>\n                        <div className=\"container\" key={post.id}>\n                            <div className='row'>\n                                <label className=\"col-md-6\" style={{textAlign: \"left\", fontSize: \"28px\"}}>{post.title}</label>\n                                <div className=\"col-md-3\"></div>\n                                <div className=\"col-md\">\n                                    <button id={`${post.id}`} className=\"row\" style={{cursor: \"pointer\"}} onClick={(e) => {this.deletePost(e)}}>Delete Post</button>\n                                    <label className=\"row\" style={{textAlign: \"right\"}}>Date: {post.creationDate.substring(0, 10)}</label>\n                                </div>\n                            </div>\n                            <div className='row pb-1'>\n                                <TextareaAutosize id={post.id} readOnly={false} defaultValue={post.content} onChange={(e) => {this.postChanged(e)}} onFocus={(e) => {this.expandPost(e)}} style={{cursor: \"pointer\"}}></TextareaAutosize>\n                            </div>\n                            <div className=\"row pb-1\">\n                                <div className=\"col-md-9\"></div>\n                                <button id={post.id} className=\"col-md-2\" style={{cursor: \"pointer\"}} onClick={(e) => {this.updatePost(e)}}>Save Edits</button>\n                            </div>\n                        </div>\n                        <div className=\"row mb-3\" key={`${post.id}_space`}></div>\n                    </div>\n    \n                )\n            });\n        }\n\n        return(\n            <div>\n                {output}\n            </div>\n        );\n    }   \n\n\n    render() {\n\n        return(\n            <div className=\"content_page>\">\n                <h2>My Glorious Content</h2>\n\n                {(() => {\n                    switch (this.state.posts) {\n                        case null:\n                            return(\n                                <div>\n                                </div>\n                            )\n                        default:\n                            return (\n                                <div>\n                                    <this.renderPosts />\n                                </div>\n                            )\n                    }\n                })()}\n            </div>\n        )\n    }\n}\n\nexport default _User_Posts_page;\n\n\n//USER STORIES\n// After logging in, the blogger should be redirected to all of their blog posts.\n//As a blogger I want to be able to see all of the posts I have created so that I can track my progress.\n//The blog posts should only display the first 100 characters with “...” at the end if they are longer than 100 characters.\n\n//As a blogger I want to be able to see any individual post I have made.\n//The full post should be displayed.\n//As a blogger I want to be able to edit a post so that I can fix any mistakes I made creating it.\n//When the user toggles edit mode, the page remains the same and the fields become editable.\n\n//As a blogger I want to be able to delete a post so that I can remove any unwanted content.\n//When the user deletes the blog they should be redirected to all of their blog posts.\n\n\n\n"]},"metadata":{},"sourceType":"module"}